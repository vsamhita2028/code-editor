{"version":3,"sources":["Components/Appbar.js","Components/CustomEditor.js","Components/EditorSection.js","App.js","index.js"],"names":["Appbar","lightMode","toggleLightMode","ChangeLayout","useState","dropdownOpen","setDropdownOpen","Navbar","color","dark","NavbarBrand","href","Nav","className","NavItem","style","paddingRight","Provider","value","size","onClick","Dropdown","isOpen","toggle","prevState","direction","DropdownToggle","outline","DropdownMenu","DropdownItem","Customeditor","editorData","index","onChange","displayPreview","editormode","height","width","mode","language","result","theme","fontSize","wrapEnabled","highlightActiveLine","autoScrollEditorIntoView","setOptions","showLineNumbers","tabSize","EditorSection","layout","editorMode","fileExplorerBg","seteditorData","preview","setPreview","collapsed","setCollapsed","setWidth","flipIcon","setFlipIcon","setIndex","insertConent","Col","md","tri","backgroundColor","name","extension","default","Button","padding","title","srcDoc","sandbox","App","setLayout","setMode","setEditorMode","setFileExplorerBg","id","content","Container","fluid","Row","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1c85c77.chunk.js","sourcesContent":["import '../App.css';\r\nimport { useState } from 'react';\r\nimport { IconContext } from \"react-icons\";\r\nimport { IoSunny, IoMoon } from \"react-icons/io5\";\r\nimport { Navbar, NavbarBrand, Nav, NavItem, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\n/*\r\n  Appbar component contains the topbar which facilitates the change of the theme and layout\r\n */\r\nconst Appbar = ({ lightMode, toggleLightMode, ChangeLayout }) => {\r\n\r\n  const [dropdownOpen, setDropdownOpen] = useState(false); //The states the allows toggling the dropdown change Layout Button\r\n  const toggle = () => setDropdownOpen(prevState => !prevState); // This function is responsible for toggling the dropdown\r\n\r\n  return (\r\n    <>\r\n      <Navbar color=\"dark\" dark>\r\n        <NavbarBrand href=\"/\">Custom Editor</NavbarBrand>\r\n        <Nav className=\"mr-auto\" >\r\n          {/* The teranary operator is responsible to switch the icon that represents light mode and dark mode */}\r\n          {!lightMode ? <NavItem style={{ paddingRight: \"10px\" }}>\r\n            <IconContext.Provider value={{ color: \"white\", size: \"37px\" }}>\r\n              <div onClick={toggleLightMode}><IoSunny /></div>\r\n            </IconContext.Provider>\r\n          </NavItem> :\r\n            <NavItem style={{ paddingRight: \"10px\" }}>\r\n              <IconContext.Provider value={{ color: \"white\", size: \"37px\" }}>\r\n                <div onClick={toggleLightMode}><IoMoon /></div>\r\n              </IconContext.Provider>\r\n            </NavItem>}\r\n          {/* Change layout out drop dwon button  */}\r\n          <NavItem>\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle} direction=\"down\" style={{ paddingRight: \"15px\" }}>\r\n              <DropdownToggle color=\"light\" outline>\r\n                Change Layout\r\n              </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem onClick={() => ChangeLayout(\"default\")}>Default</DropdownItem>\r\n                <DropdownItem onClick={() => ChangeLayout(\"triple\")}>Triple</DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          </NavItem>\r\n        </Nav>\r\n      </Navbar>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Appbar;","import AceEditor from 'react-ace';\r\nimport \"ace-builds/webpack-resolver\"\r\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/snippets/html\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/snippets/javascript\";\r\nimport \"ace-builds/src-noconflict/mode-css\";\r\nimport \"ace-builds/src-noconflict/snippets/css\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/theme-textmate\";\r\nimport '../App.css';\r\n\r\n/* \r\n    Custom Editor :\r\n    Here I have used React Ace library to customize the editor\r\n*/\r\nconst Customeditor = ({ editorData, index, onChange, displayPreview, editormode }) => {\r\n\r\n    // This function is reponsible to set the editordata state and cobine html+css+js for the live view and set it's state\r\n    const bindChanges = (value) => {\r\n        const result = editorData;\r\n        result[index][\"content\"] = value\r\n        onChange(result);\r\n        displayPreview(\"<html><body>\" + editorData[0][\"content\"] + \"<style>\" + editorData[1][\"content\"] + \"</style><script>\" + editorData[2][\"content\"] + \"</script><body></html>\")\r\n    }\r\n    return (\r\n        <>\r\n        {/* \r\n          Mode : Sets the language for the editor \r\n          value : populates contents into the editor\r\n          theme : to set the theme\r\n          wrapEnabled : to wrap the contents of the editor\r\n          highlightActiveLine : this highlight the line where the user's cursor is present\r\n          autoScrollEditorIntoView : as its set to true, the editor becomes scrollable.\r\n          showLineNumbers : line numbers are made visible dude to this prop\r\n        */}\r\n            <AceEditor\r\n                height={\"87%\"}\r\n                width={\"100%\"}\r\n                mode={editorData[index].language}\r\n                onChange={bindChanges}\r\n                value={editorData[index][\"content\"]}\r\n                theme={editormode}\r\n                fontSize={14}\r\n                wrapEnabled={true}\r\n                highlightActiveLine={true}\r\n                autoScrollEditorIntoView={true}\r\n                setOptions={{\r\n                    showLineNumbers: true,\r\n                    tabSize: 2,\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Customeditor;","import '../App.css';\r\nimport { useState } from 'react';\r\nimport { FaFileCode } from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { Col, Button } from 'reactstrap';\r\nimport Customeditor from './CustomEditor';\r\nimport { IoChevronBackOutline, IoChevronForwardOutline } from \"react-icons/io5\";\r\n/* \r\n    EditorSection Component :\r\n    This component contains the layout of the editor section and the file explorer.\r\n*/\r\nconst EditorSection = (\r\n    { layout, editorMode, fileExplorerBg, editorData, seteditorData, preview, setPreview, collapsed, setCollapsed, width, setWidth }) => {\r\n    const [flipIcon, setFlipIcon] = useState(true) // This is responsible for toggling the file explorer icon.\r\n    // As editor data consists html,css and js data. This index acts like an idetifier for the user's language selection \r\n    //For instance if html is chosen by the user the then index is set to 0. Similarly for css index is 1 and for js its 2.\r\n    const [index, setIndex] = useState(0); \r\n    //Allows toggling and sets the width of all the components based on the theme selected\r\n    const toggleExplorer = () => {\r\n        setCollapsed(!collapsed);\r\n        setFlipIcon(!flipIcon)\r\n        if (width === \"12\" && layout.default) {\r\n            setWidth(\"10\")\r\n        } else if (layout.default) {\r\n            setWidth(\"12\")\r\n        } else if (layout.tri) {\r\n            setWidth(\"5\");\r\n        }\r\n    }\r\n    //Populates the selected laguage's contents or code.\r\n    const insertConent = (index) => {\r\n        setIndex(index);\r\n    }\r\n    return (\r\n        <>\r\n        {/* Based on the collapsed value, the file explorer is hidden. Initially the File Explorer is hidden. */}\r\n            {collapsed &&\r\n                <Col md={2} style={layout.tri ? { backgroundColor: fileExplorerBg, height: \"94%\" } : { backgroundColor: fileExplorerBg }} >\r\n                    <h3 className=\"mb-3 mt-2\" style={{ color: \"rgba(182, 179, 179, 1)\" }}>File Explorer</h3>\r\n                    <div className=\"fileExplorer-items\" onClick={() => insertConent(0)}  >\r\n                        <IconContext.Provider value={{ color: \"rgba(252, 199, 10, 1)\", className: \"global-class-name\" }}>\r\n                            <FaFileCode /> {editorData[0].name + \".\" + editorData[0].extension} {/* HTML FILE */}\r\n                        </IconContext.Provider>\r\n                    </div>\r\n                    <div className=\"fileExplorer-items\" onClick={() => insertConent(1)}>\r\n                        <IconContext.Provider value={{ color: \"rgba(252, 199, 10, 1)\", className: \"global-class-name\" }}>\r\n                            <FaFileCode /> {editorData[0].name + \".\" + editorData[1].extension} {/* CSS FILE*/}\r\n                        </IconContext.Provider>\r\n                    </div>\r\n                    <div className=\"fileExplorer-items\" onClick={() => insertConent(2)}>\r\n                        <IconContext.Provider value={{ color: \"rgba(252, 199, 10, 1)\", className: \"global-class-name\" }}>\r\n                            <FaFileCode /> {editorData[0].name + \".\" + editorData[2].extension} {/* JS FILE */}\r\n                        </IconContext.Provider>\r\n                    </div>\r\n                </Col>}\r\n            <Col md={width}>\r\n                {/* Here the language selected is how and the toggle button of file Explorer is present */}\r\n                <h2><span>{layout.default && <Button color={\"light\"} onClick={toggleExplorer}>{flipIcon ? <IoChevronForwardOutline /> : <IoChevronBackOutline />}</Button>}{\" \"}<span className=\"custom-badge\">{editorData[index][\"language\"]}</span></span> </h2>\r\n                {/* This component contains the editor. (More details about the componet are present in respective component file ) */}\r\n                {<Customeditor editorData={editorData} index={index} onChange={seteditorData} displayPreview={setPreview} editormode={editorMode} />}\r\n            </Col>\r\n            {/*\r\n                This is the Live view section, which shows the output of the code\r\n                In App.js there is already a Live view section present. Then why is it present here again?\r\n                This Live View is only present if the layout is triple else this is hidden.\r\n                The Live View Section in the App.js is only visible in default layout otherwise it is hidden\r\n            */}\r\n            {layout.tri && <Col md={5} className=\"mt-2\">\r\n                <span className=\"preview-badge\" style={{ width: \"5em\", padding: \"0.5em\" }}>Preview</span>\r\n                <iframe className={\"mt-3\"} title=\"live-preview\" srcDoc={preview} sandbox=\"allow-scripts\" width=\"100%\" height=\"86.8%\" ></iframe>\r\n            </Col>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EditorSection;","import './App.js';\nimport { Row } from 'reactstrap';\nimport { useState } from 'react';\nimport Appbar from \"./Components/Appbar\"\nimport { Container } from 'react-bootstrap';\nimport EditorSection from \"./Components/EditorSection\";\n/* \n  The whole page is divided into 3 sections :\n  1) Appbar\n  2) Editor + FileExplorer\n  3) Live view / Output\n*/\nfunction App() {\n  // All layout and theme states\n  // 1. Layout states :\n  const [layout, setLayout] = useState({ default: true, tri: false })  // This sets the layout of the webpage : Default or Triple View\n  const [collapsed, setCollapsed] = useState(false); // To toggle File explorer. This sets it's visibility\n  const [width, setWidth] = useState(\"12\") // To change layout I have used this state to dynamically change width of a bootstrap column\n  // 2. Theme State\n  const [lightMode, setMode] = useState(true); // To toggle from lightMode to dark Mode. By default its in Light Mode\n  const [editorMode, setEditorMode] = useState(\"textmate\") // To facilitate the toggle of editor's mode/theme between Textmate & Monokai\n  const [fileExplorerBg, setFileExplorerBg] = useState(\"white\") // To toggle the theme of the fileExplorer this is use.\n\n  // editorData : This holds the data of the editor, upon selection of a file from file explorer it populates the data into the editor \n  const [editorData, seteditorData] = useState([\n    {\n      id: 1,\n      name: \"index\",\n      language: \"html\",\n      extension: \"html\",\n      content: \"\"\n    },\n    {\n      id: 2,\n      name: \"index\",\n      language: \"css\",\n      extension: \"css\",\n      content: \"\"\n    },\n    {\n      id: 3,\n      name: \"indexsss\",\n      language: \"javascript\",\n      extension: \"js\",\n      content: \"\"\n    },\n  ])\n\n  // The Live view of html+css+js is stored in the variable preview \n  const [preview, setPreview] = useState(\"<html><body>\" + editorData[0][\"content\"] + \"<style>\" + editorData[1][\"content\"] + \"</style><script>\" + editorData[2][\"content\"] + \"</script><body></html>\");\n  \n  // This function is responsible for toggling the theme of all the components\n  const toggleLightMode = () => {\n    setMode(!lightMode);\n    if (editorMode === \"textmate\") setEditorMode(\"monokai\");\n    else setEditorMode(\"textmate\")\n    fileExplorerBg === \"white\" ? setFileExplorerBg(\"rgba(66, 66, 69, 1)\") : setFileExplorerBg(\"white\")\n  }\n\n  // This function is rsponsible for changing the layout of all the components\n  const ChangeLayout = (layout) => {\n    if (layout === \"default\") {\n      setWidth(\"12\")\n      setCollapsed(false);\n      setLayout({ default: true, tri: false })\n    } else if (layout === \"triple\") {\n      setWidth(\"5\")\n      setLayout({ default: false, tri: true })\n      setCollapsed(true);\n    }\n  }\n  return (\n    <div className=\"App\" style={lightMode ? { backgroundColor: \"rgb(241,243,244)\" } : { backgroundColor: \"rgba(41, 42, 47, 1)\" }}>\n      <Container fluid>\n        <Row>\n          {/* Appbar Component  */}\n          <Appbar lightMode={lightMode} toggleLightMode={toggleLightMode} ChangeLayout={ChangeLayout} /> \n        </Row>\n\n        <Row className=\"editor-section mt-2\" style={layout.tri ? { height: \"48em\" } : { height: \"400px\" }} >\n          {/*  Editor and the File Explore are present in the EditorSection Component  */}\n          <EditorSection\n            layout={layout} editorMode={editorMode} fileExplorerBg={fileExplorerBg} editorData={editorData} seteditorData={seteditorData}\n            preview={preview} setPreview={setPreview} collapsed={collapsed} setCollapsed={setCollapsed} width={width} setWidth={setWidth}\n          />\n        </Row>\n        {/* This shows the live view of the changes made in the editor */}\n        {layout.default && <Row className=\"live-view\">\n          <center><span className=\"preview-badge\" style={{ width: \"5em\", padding: \"0.4em\" }}>Preview</span></center>\n          <span className=\"mt-3\"></span>\n          <iframe title=\"live-preview\" srcDoc={preview} sandbox=\"allow-scripts\" width=\"100%\" height=\"275px\"></iframe>\n        </Row>}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}